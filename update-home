#!/usr/bin/env python


import os
import sys
from filecmp import cmp
from os.path import dirname, exists, isdir, join, realpath, samefile


def create_home_links(source_dir, target_dir, f_prefix=""):
    if not os.path.exists(source_dir):
        print(
            "Skipping non-existent source directory: %s" % source_dir, file=sys.stderr
        )
        return

    target_dir = os.path.expanduser(target_dir)

    if not os.path.exists(target_dir):
        print("Creating %s" % target_dir)
        os.mkdir(target_dir)

    for f in os.listdir(source_dir):
        source_file = join(source_dir, f)
        target_file = join(target_dir, f_prefix + f)

        if exists(target_file) and isdir(target_file):
            continue

        # Process:
        #     1) If the file does not exist, link
        #     2) If the file exists and is a link, check the target
        #     3) If the file exists, check the target

        if exists(target_file):
            if samefile(source_file, target_file):
                continue
            elif cmp(source_file, target_file, shallow=False):
                print(
                    f"Replacing identical file {target_file} with {source_file}",
                    file=sys.stderr,
                )
                os.remove(target_file)
            else:
                print(
                    f"Skipping {source_file}: {target_file} already exists",
                    file=sys.stderr,
                )
                continue

        try:
            os.symlink(source_file, target_file)
        except OSError as e:
            print(
                f"Unable to symlink {source_file} to {target_file}: {e}",
                file=sys.stderr,
            )
            continue


def main():
    root = dirname(realpath(__file__))
    os.chdir(root)

    create_home_links(join(root, "etc"), "~/", ".")
    create_home_links(join(root, "bin"), "~/bin")
    create_home_links(join(root, "bash_completion.d"), "~/.bash_completion.d")


if __name__ == "__main__":
    main()
