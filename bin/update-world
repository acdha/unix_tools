#!/usr/bin/env python3
"""
Walk paths looking for things which may have updates pending

Currently supported: Git repositories, Python Pipfiles, and NPM packages
"""

import argparse
import os
import subprocess  # nosec: all input is trusted
import sys

GIT_UPDATE_COMMANDS = [["git", "fetch", "--all", "--prune"], ["git", "pull"]]
NPM_UPDATE_COMMANDS = [["npm", "install"]]
PIPFILE_COMMANDS = [["pipenv", "install", "--dev"], ["pipenv", "check"]]

os.environ["PIPENV_NOSPIN"] = "1"
os.environ["PIPENV_COLORBLIND"] = "1"


def print_prefixed(text, stream, prefix):
    if prefix:
        prefix = f"\t{prefix}: "
    else:
        prefix = "\t"

    for line in text.splitlines():
        print(prefix, line.strip(), file=sys.stderr)


def run_command(cmd, *, cwd, verbose=False):
    try:
        output = subprocess.check_output(  # nosec: all input is trusted
            cmd, cwd=cwd, stdin=subprocess.DEVNULL, stderr=subprocess.PIPE, text=True
        )
        if verbose:
            print_prefixed(output, sys.stdout, "")
            print()
    except subprocess.CalledProcessError as exc:
        print_prefixed(str(exc), sys.stderr, "exception")
        for stream_name in ("stderr", "stdout"):
            stream = getattr(exc, stream_name)
            if stream:
                print_prefixed(stream, sys.stderr, stream_name)
        print(file=sys.stderr)


def crawl_directory(base_dir, *, verbose=False):
    for dirpath, dirnames, filenames in os.walk(base_dir):
        cwd = os.path.join(base_dir, dirpath)

        if ".git" in dirnames:
            print("Updating Git repository in", cwd)
            for cmd in GIT_UPDATE_COMMANDS:
                run_command(cmd, cwd=cwd, verbose=verbose)

        if "node_modules" in dirnames:
            print("Checking Node modules in", cwd)
            for cmd in NPM_UPDATE_COMMANDS:
                run_command(cmd, cwd=cwd, verbose=verbose)

        if ".pre-commit-config.yaml" in filenames:
            run_command(["pre-commit", "install-hooks"], cwd=cwd, verbose=verbose)

        if "Pipfile" in filenames:
            print("Checking Pipfile in", cwd)

            try:
                subprocess.check_call(  # nosec: all input is trusted
                    ["pipenv", "run", "python", "--version"],
                    stdin=subprocess.DEVNULL,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                    cwd=cwd,
                )
            except subprocess.CalledProcessError:
                print(f"\tRecreating virtualenv environment", flush=True)
                run_command(["pipenv", "--rm"], cwd=cwd)

            for cmd in PIPFILE_COMMANDS:
                run_command(cmd, cwd=cwd, verbose=verbose)

        for ignore_dir in ("node_modules",):
            if ignore_dir in dirnames:
                dirnames.remove(ignore_dir)

        for hidden_dir in [i for i in dirnames if i.startswith(".")]:
            dirnames.remove(hidden_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(__doc__.strip())
    parser.add_argument(
        "paths",
        nargs="+",
        metavar="PATH",
        help="Path to look for repositories in, may be repeated",
    )
    parser.add_argument("--verbose")
    args = parser.parse_args()

    for path in args.paths:
        crawl_directory(os.path.realpath(path), verbose=args.verbose)
