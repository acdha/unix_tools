#!/usr/bin/perl -w

use File::Basename;
use File::Spec;
use File::Copy;
use File::stat;
use Getopt::Long;
use Mail::Box::Maildir;
use Mail::Box::Manager;
use Mail::Box::Message;
use POSIX qw(strftime);
use strict;
use warnings FATAL => qw(uninitialized);

my $TestMode       = 0;
my $DeleteOriginal = 0;
my $Verbosity      = 0;
my $MaxAgeInDays   = 30;
my $FastMaildirOps = 0;
my $ArchivePrefix;
my $Format = '%Y.%m';
my @NewFolders;

Getopt::Long::Configure("bundling");    # Allow single-dash options to be groups: -vvvv = -v -v -v -v
GetOptions(
  'v|verbose+'       => \$Verbosity,
  'max-days=i'       => \$MaxAgeInDays,
  'days=i'           => \$MaxAgeInDays,
  'path=s'           => \$ArchivePrefix,
  'prefix=s'         => \$ArchivePrefix,
  'delete'           => \$DeleteOriginal,
  'date-format=s'    => \$Format,
  'format=s'         => \$Format,
  'test'             => \$TestMode,
  'fast-maildir-ops' => \$FastMaildirOps
);

if ( $Verbosity > 4 ) {
  Mail::Reporter->defaultTrace( 'NOTICE', 'NOTICE' );
} elsif ( $Verbosity > 5 ) {
  Mail::Reporter->defaultTrace( 'DEBUG', 'DEBUG' );
}

if ($ArchivePrefix) {
  $ArchivePrefix = File::Spec->canonpath($ArchivePrefix);
}

my $MaxAge = time() - ( $MaxAgeInDays * 86400 );

my $Manager = new Mail::Box::Manager(
  access            => 'rw',
  save_on_exit      => 1,
  create            => 1,
  remove_when_empty => 0,
  extract           => 'LAZY'
);

foreach my $MailboxPath (@ARGV) {
  $MailboxPath = File::Spec->canonpath($MailboxPath);

  if ( !-r $MailboxPath ) {
    print STDERR "Couldn't read $MailboxPath - skipping!";
    next;
  }

  # BUG: fork() around the massive memory leaks in Mail::Box
  my $child_pid;
  if ( $child_pid = fork() ) {
    waitpid( $child_pid, 0 );
  } else {
    process_mailbox($MailboxPath);

    my $f = $Manager->open($MailboxPath);

    print "Fixing incorrect message dates in $f\n" if $Verbosity;

    foreach my $Message ( $f->messages ) {
      print "." if $Verbosity == 1;
      my $t = get_message_timestamp($Message);

      next
        if ( abs( $t - stat( $Message->filename )->mtime ) < 900 )
        ;   # Ignore up to fifteen minute discrepancies between the file times and message times (clock skew, delivery delays, etc.)

      print "Changing date for ", $Message->filename, " from ", scalar localtime( stat( $Message->filename )->mtime ), " to ",
        scalar localtime($t), " ($t)\n"
        if $Verbosity > 2;

      utime $t, $t, $Message->filename;

      # Update the internal stored mtime to avoid getting annoying "changed during access" warnings:
      $Message->{MM_body}->{MMBD_parser}->{MBP_mtime} = $t;
    }

    print "\n" if $Verbosity;

    exit;
  }
}

sub get_message_timestamp {
  my $Message = shift;

  my $msgTimestamp = $Message->head->recvstamp();
  if ( !$msgTimestamp ) {
    if ( basename( $Message->filename ) =~ m/^(\d+)/ ) {
      $msgTimestamp = $1;
      print STDERR
        "Corrected Mail::Box::Maildir::Message->timestamp() bug using Maildir filename: timestamp is really $msgTimestamp\n"
        if $Verbosity > 2;
    } elsif ( $msgTimestamp = Mail::Message::Field->dateToTimestamp( $Message->date ) ) {
      print STDERR "Corrected Mail::Box::Maildir::Message->timestamp() bug using Date header: timestamp is really $msgTimestamp\n"
        if $Verbosity > 2;
    } else {
      die( "Could not get timestamp for ", $Message->filename, " - this should not be possible: $!\n" );
    }
  }

  return $msgTimestamp;
}

sub process_mailbox {
  my $MailboxPath = shift or die("process_mailbox() called without a mailbox path!\n");

  my $Mailbox = $Manager->open(
    $MailboxPath,
    access => ( $DeleteOriginal ? 'rw' : 'ro' ),
    save_on_exit      => 1,
    remove_when_empty => 0,
    extract           => 'LAZY'
  ) or die("Couldn't open source maildir $MailboxPath: $!\n");

  print "Opened ", $Mailbox->name, " (", $Mailbox->type, ")\n" if $Verbosity > 1;

  foreach my $Message ( $Mailbox->messages ) {

    # Display the filename (Maildir) or index number (mbox) for the current message:
    print "Now processing ", ( $Message->can('filename') ? $Message->filename : $Message->seqnr ), "\n" if $Verbosity > 3;

    my $msgTimestamp = get_message_timestamp($Message);

    next unless $msgTimestamp < $MaxAge;

    print "Old message: " . $Message->subject . " (" . localtime($msgTimestamp) . ")\n" if $Verbosity > 2;

    my $NewFolder;

    if ($ArchivePrefix) {
      $NewFolder = $ArchivePrefix;
    } else {
      $NewFolder = $Mailbox->name;
    }

    # Expand the format string for this message:
    my $tmp = strftime( $Format, localtime($msgTimestamp) );

    if ( $tmp =~ m/\[from\]/ && $Message->sender ) {
      my $From = $Message->sender->user;
      $From =~ s/\W+/_/g;
      $tmp  =~ s/\[from\]/$From/gi;
    }

    $NewFolder .= ".$tmp";

    print "Message belongs in $NewFolder\n" if $Verbosity > 3;

    if ($TestMode) {
      last;
    }

    unless ( $Manager->isOpenFolder($NewFolder) ) {
      print "Opening $NewFolder (", $Mailbox->type, ")\n" if $Verbosity > 1;
      my $t = $Manager->open(
        $NewFolder,
        create            => 1,
        access            => 'rw',
        save_on_exit      => 1,
        remove_when_empty => 0,
        type              => $Mailbox->type,
        extract           => 'LAZY'
      );
      chmod( 0700, $t->name ) or die("Couldn't fix permissions for $NewFolder: $!\n");
      push @NewFolders, $NewFolder;
    }

    my $NewFilename = $NewFolder;

    if ( $Mailbox->type eq "maildir" ) {
      $NewFilename .= '/new/' . basename( $Message->filename );
    }
    if ($DeleteOriginal) {
      if ( $FastMaildirOps && $Mailbox->type eq "maildir" ) {

        # Work around pathological performance problem with Mail::Box instantiating a few thousand MIME::Types classes
        # when copying messages. This appears to have something to do with the way the body is parsed; unfortunately a
        # full message body parse is implied by either a copy/move operation. On a maildir we can avoid this by simply
        # manipulating the underlying file since we know it's one message per file.
        print "Moving message to $NewFilename\n" if $Verbosity > 2;
        rename( $Message->filename, $NewFilename ) or die( "Couldn't move " . $Message->filename . " to $NewFilename: $!\n" );
        $Message->destruct;
      } else {
        print "Moving message to $NewFolder\n" if $Verbosity > 2;
        $Manager->moveMessage( $NewFolder, $Message );
      }
    } else {
      if ( $FastMaildirOps && $Mailbox->type eq "maildir" ) {

        # See performance notes above
        print "Copying message to $NewFilename\n" if $Verbosity > 2;
        copy( $Message->filename, $NewFilename ) or die( "Couldn't copy " . $Message->filename . " to $NewFilename: $!\n" );
        $Message->destruct;
      } else {
        print "Copying message to $NewFolder\n" if $Verbosity > 2;
        $Manager->copyMessage( $NewFolder, $Message );
      }
    }

    utime $msgTimestamp, $msgTimestamp, $NewFilename;
  }

  $Mailbox->close();
}
